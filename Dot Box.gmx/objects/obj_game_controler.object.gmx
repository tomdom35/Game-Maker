<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
dotCount=0
for(i=64;i&lt;=room_height-64;i+=64){
    for(j=64;j&lt;=room_width-64;j+=64){
        instance_create(j,i,obj_dot)
        dotCount++
    }
}
canPlace = false
playerOneTurn = true
playerOneWin = false
draw = false
gameOver = false
scored = false
lineArray = noone
numLines = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//placing temp line
if(obj_size_of_room_text.multiplayer || (obj_size_of_room_text.singlePlayer &amp;&amp; playerOneTurn)){
    if(mouse_y%64&gt;=56&amp;&amp;canPlace){
        if(!instance_exists(obj_horz_temp_line)){
            yVal = mouse_y+(64-(mouse_y%64))
            xVal = mouse_x-(mouse_x%64)
            instance_create(xVal,yVal,obj_horz_temp_line)
        }
    }
    else if(mouse_y%64&lt;=8&amp;&amp;canPlace){
        if(!instance_exists(obj_horz_temp_line)){
            yVal = mouse_y-(mouse_y%64)
            xVal = mouse_x-(mouse_x%64)
            instance_create(xVal,yVal,obj_horz_temp_line)
        }
    }
    else if(mouse_x%64&gt;=56&amp;&amp;canPlace){
        if(!instance_exists(obj_vert_temp_line)){
            xVal = mouse_x+(64-(mouse_x%64))
            yVal = mouse_y-(mouse_y%64)
            instance_create(xVal,yVal,obj_vert_temp_line)
        }
    }
    else if(mouse_x%64&lt;=8&amp;&amp;canPlace){
        if(!instance_exists(obj_vert_temp_line)){
            yVal = mouse_y-(mouse_y%64)
            xVal = mouse_x-(mouse_x%64)
            instance_create(xVal,yVal,obj_vert_temp_line)
        }
    }

    //removing temp line if one has been placed and no longer mouseing over it
    else if(instance_exists(obj_horz_temp_line)){
        with(obj_horz_temp_line){instance_destroy()}
    }
    else if(instance_exists(obj_vert_temp_line)){
        with(obj_vert_temp_line){instance_destroy()}
    }
}

//if mouse is over a dot do not display temp lines else do display temp lines
if(place_meeting(mouse_x,mouse_y,obj_dot)){
    if(instance_exists(obj_horz_temp_line)){
        with(obj_horz_temp_line){instance_destroy()}
    }
    if(instance_exists(obj_vert_temp_line)){
        with(obj_vert_temp_line){instance_destroy()}
    }
    canPlace=false
}
else{
    canPlace = true
}

//do not display temp lines if you are around border or on a placed line
if(mouse_x&lt;56 || mouse_x&gt;room_width-56 || mouse_y&lt;56 || mouse_y&gt;room_height-56 || place_meeting(mouse_x,mouse_y,obj_placed_line)){
    canPlace = false
}
else{
    canPlace = true
}

//if temp line is being displayed, click to place the line, check if box is created
if(mouse_check_button_pressed(mb_left)){
    if(instance_exists(obj_vert_temp_line)){
        line = instance_create(obj_vert_temp_line.x,obj_vert_temp_line.y,obj_vert_placed_line)
        lineArray[numLines] = line
        numLines++
        with(obj_vert_temp_line){instance_destroy()}
        //check for completed box
        if(place_meeting(line.x+64,line.y+32,obj_vert_placed_line)&amp;&amp;place_meeting(line.x+32,line.y,obj_horz_placed_line)&amp;&amp;place_meeting(line.x+32,line.y+64,obj_horz_placed_line)){
            if(playerOneTurn){
                instance_create(line.x,line.y,obj_player_one_box)
            }
            else{
                instance_create(line.x,line.y,obj_player_two_box)
            }
            scored = true
        }
        if(place_meeting(line.x-64,line.y+32,obj_vert_placed_line)&amp;&amp;place_meeting(line.x-32,line.y,obj_horz_placed_line)&amp;&amp;place_meeting(line.x-32,line.y+64,obj_horz_placed_line)){
            if(playerOneTurn){
                instance_create(line.x-64,line.y,obj_player_one_box)
            }
            else{
                instance_create(line.x-64,line.y,obj_player_two_box)
            }
            scored = true
        }
        if(!scored){
            playerOneTurn = !playerOneTurn
        }
        else{
            scored = false;
        }
    }
    else if(instance_exists(obj_horz_temp_line)){
        line = instance_create(obj_horz_temp_line.x,obj_horz_temp_line.y,obj_horz_placed_line)
        lineArray[numLines] = line
        numLines++
        with(obj_horz_temp_line){instance_destroy()}
        //check for completed box
        if(place_meeting(line.x+32,line.y+64,obj_horz_placed_line)&amp;&amp;place_meeting(line.x,line.y+32,obj_vert_placed_line)&amp;&amp;place_meeting(line.x+64,line.y+32,obj_vert_placed_line)){
            if(playerOneTurn){
                instance_create(line.x, line.y, obj_player_one_box)
            }
            else{
                instance_create(line.x, line.y, obj_player_two_box)
            }
            scored = true
        }
        if(place_meeting(line.x+32,line.y-64,obj_horz_placed_line)&amp;&amp;place_meeting(line.x,line.y-32,obj_vert_placed_line)&amp;&amp;place_meeting(line.x+64,line.y-32,obj_vert_placed_line)){
            if(playerOneTurn){
                instance_create(line.x, line.y-64, obj_player_one_box)
            }
            else{
                instance_create(line.x, line.y-64, obj_player_two_box)
            }
            scored = true
        }
        if(!scored){
            playerOneTurn = !playerOneTurn
        }
        else{
            scored = false;
        }
    }
}

//game over win conditions
if(instance_number(obj_box)==obj_size_of_room_text.size*obj_size_of_room_text.size){
    gameOver = true
    if(instance_number(obj_player_one_box)==instance_number(obj_player_two_box)){
        draw = true
    }
    else if(instance_number(obj_player_one_box)&gt;instance_number(obj_player_two_box)){
        playerOneWin = true
    }
    else{
        playerOneWin = false
    }
}


if(gameOver&amp;&amp;keyboard_check_pressed(vk_space)){
    game_restart()
}



if(keyboard_check_pressed(vk_enter)){
    audio_stop_all()
    window_set_size(768,768)
    game_restart()
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
