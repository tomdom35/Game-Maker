<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mainStandingFront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facingFront = true;
facingBack = false;
facingRight = false;
facingLeft = false;
runSpeed = 5;
walkSpeed = 3;
canMoveUp = true;
canMoveDown = true;
canMoveLeft = true;
canMoveRight = true;
sword = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = keyboard_check_direct(vk_up);
down = keyboard_check_direct(vk_down);
left = keyboard_check_direct(vk_left);
right = keyboard_check_direct(vk_right);
sprint = keyboard_check_direct(vk_shift);
if(keyboard_check_pressed(vk_space)) sword = !sword;

if(up &amp;&amp; canMoveUp){
    facingFront = false;
    facingRight = false;
    facingLeft = false;
    facingBack = true;
    if(sword&amp;&amp;sprint){
        sprite_index = spr_mainRunningBackSword;
        y-=runSpeed;
    }
    else if(sword){
        sprite_index = spr_mainWalkingBackSword;
        y-=walkSpeed;
    }
    else if(sprint){
        sprite_index = spr_mainRunningBack;
        y-=runSpeed;
    }
    else{
        sprite_index = spr_mainWalkingBack;
        y-=walkSpeed;
    }
}
else if(down &amp;&amp; canMoveDown){
    facingBack = false;
    facingLeft = false;
    facingRight = false;    
    facingFront = true;
    if(sword&amp;&amp;sprint){
        sprite_index = spr_mainRunningFrontSword;
        y+=runSpeed;
    }
    else if(sword){
        sprite_index = spr_mainWalkingFrontSword;
        y+=walkSpeed;
    }
    else if(sprint){
        sprite_index = spr_mainRunningFront;
        y+=runSpeed;
    }
    else{
        sprite_index = spr_mainWalkingFront;
        y+=walkSpeed;
    }
}
else if(left &amp;&amp; canMoveLeft){
    facingBack = false;
    facingFront = false;
    facingRight = false;
    facingLeft = true;
    if(sword&amp;&amp;sprint){
        sprite_index = spr_mainRunningLeftSword;
        x-=runSpeed;
    }
    else if(sword){
        sprite_index = spr_mainWalkingLeftSword;
        x-=walkSpeed;
    }
    else if(sprint){
        sprite_index = spr_mainRunningLeft;
        x-=runSpeed;
    }
    else{
        sprite_index = spr_mainWalkingLeft;
        x-=walkSpeed;
    }
}
else if(right &amp;&amp; canMoveRight){
    facingBack = false;
    facingFront = false;
    facingLeft = false;
    facingRight = true;
    if(sword&amp;&amp;sprint){
        sprite_index = spr_mainRunningRightSword;
        x+=runSpeed;
    }
    else if(sword){
        sprite_index = spr_mainWalkingRightSword;
        x+=walkSpeed;
    }
    else if(sprint){
        sprite_index = spr_mainRunningRight;
        x+=runSpeed;
    }
    else{
        sprite_index = spr_mainWalkingRight;
        x+=walkSpeed;
    }
}
else{
    if(facingFront){
        if(sword)sprite_index = spr_mainStandingFrontSword;
        else sprite_index = spr_mainStandingFront;
    }
    else if(facingBack){
        if(sword) sprite_index = spr_mainStandingBackSword;
        else sprite_index = spr_mainStandingBack;
    }
    else if(facingRight){
        if(sword) sprite_index = spr_mainStandingRightSword;
        else sprite_index = spr_mainStandingRight;
    }
    else if(facingLeft){
        if(sword) sprite_index = spr_mainStandingLeftSword;
        else sprite_index = spr_mainStandingLeft;
    }
}

if(place_meeting(x+runSpeed,y,obj_parentObsticle)) canMoveRight = false;
else canMoveRight = true;
if(place_meeting(x-runSpeed,y,obj_parentObsticle)) canMoveLeft = false;
else canMoveLeft = true;
if(place_meeting(x,y+runSpeed,obj_parentObsticle)) canMoveDown = false;
else canMoveDown = true;
if(place_meeting(x,y-runSpeed,obj_parentObsticle)) canMoveUp = false;
else canMoveUp = true;


if(x&lt;0)x=0;
if(x&gt;room_width-32) x = room_width-32;
if(y&lt;0)y=0;
if(y&gt;room_height-32) y = room_height-32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_prevRoomChange">
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_nextRoomChange">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
