<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_myBounds</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
canMoveUp = false;
canMoveDown = true;
canMoveRight = true;
canMoveLeft = false;
change = false;
done = false;
placed = false;
checkingPlaced = false;
instance_create(32,64,obj_mazeBlock);
instance_create(32,96,obj_mazeBlock);
xVar = 32;
yVar = 96;
X=0;
Y=0;
v = 0;
a = 0;
b = 0;
c = 0;
val = 10;
numBlocks = 2;
pathLength = 5;
currentBlock = obj_mazeControler;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(currentBlock == instance_nearest(xVar,yVar,obj_mazeBlock)){
    canMoveUp=false;
    canMoveDown = false;
    canMoveLeft = false;
    canMoveRight = false;
    change = true;
}
checkingPlaced = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!change){
placed = false;
if(place_meeting(xVar-32,yVar,obj_mazeBlock)){
    canMoveLeft = false;
    canMoveRight = true;
    canMoveDown = true;
    canMoveUp = true;
    v = 1;
}
else if(place_meeting(xVar,yVar-32,obj_mazeBlock)){
    canMoveUp = false;
    canMoveDown = true;
    canMoveLeft = true;
    canMoveRight = true;
    v = 2;
}
else if(place_meeting(xVar+32,yVar,obj_mazeBlock)){
    canMoveRight = false;
    canMoveLeft = true;
    canMoveUp = true;
    canMoveDown = true;
    v = 3;
}

else if(place_meeting(xVar,yVar+32,obj_mazeBlock)){
    canMoveDown = false;
    canMoveUp = true;
    canMoveRight = true;
    canMoveLeft = true;
    v = 4;
}

if(xVar+64&gt;=room_width) canMoveRight = false;
if(xVar-64&lt;0) canMoveLeft = false;
if(yVar+64&gt;=room_height) canMoveDown = false;
if(yVar-64&lt;0)canMoveUp = false;

if(place_meeting(xVar-32,yVar-32,obj_mazeBlock)){
    canMoveUp = false;
    canMoveLeft = false;
}
if(place_meeting(xVar+32,yVar+32,obj_mazeBlock)){
    canMoveDown = false;
    canMoveRight = false;
}
if(place_meeting(xVar-32,yVar+32,obj_mazeBlock)){
    canMoveLeft = false;
    canMoveDown = false;
}
if(place_meeting(xVar+32,yVar-32,obj_mazeBlock)){
    canMoveRight = false;
    canMoveUp = false;
}




direct = round(random(4))
if(direct==0){
    if(canMoveUp){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar - (blockCount*32)&gt;32;blockCount--){
            yVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveDown){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar + (blockCount*32)&lt;room_height-32;blockCount--){
            yVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveRight){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar + (blockCount*32)&lt;room_width-32;blockCount--){
            xVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveLeft){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar - (blockCount*32)&gt;32;blockCount--){
            xVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
}
else if(direct==1){
    if(canMoveDown){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar + (blockCount*32)&lt;room_height-32;blockCount--){
            yVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveRight){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar + (blockCount*32)&lt;room_width-32;blockCount--){
            xVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveLeft){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar - (blockCount*32)&gt;32;blockCount--){
            xVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveUp){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar - (blockCount*32)&gt;32;blockCount--){
            yVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
}
else if(direct==2){
    if(canMoveRight){
        for(blockCount = round(random(7));blockCount&gt;0&amp;&amp;xVar + (blockCount*32)&lt;room_width-32;blockCount--){
            xVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveLeft){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar - (blockCount*32)&gt;32;blockCount--){
            xVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveUp){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar - (blockCount*32)&gt;32;blockCount--){
            yVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveDown){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar + (blockCount*32)&lt;room_height-32;blockCount--){
            yVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
}
else if(direct==3){
    if(canMoveLeft){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar - (blockCount*32)&gt;32;blockCount--){
            xVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveUp){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar - (blockCount*32)&gt;32;blockCount--){
            yVar-=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveDown){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;yVar + (blockCount*32)&lt;room_height-32;blockCount--){
            yVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
    else if(canMoveRight){
        for(blockCount = round(random(pathLength));blockCount&gt;0&amp;&amp;xVar + (blockCount*32)&lt;room_width-32;blockCount--){
            xVar+=32;
            instance_create(xVar,yVar,obj_mazeBlock);
            numBlocks++;
            placed = true;
        }
    }
}

if(!placed&amp;&amp;!checkingPlaced){
    currentBlock = instance_nearest(xVar,yVar,obj_mazeBlock);
    checkingPlaced = true;
    alarm[0] = 10;
}
}
if(!canMoveUp&amp;&amp;!canMoveDown&amp;&amp;!canMoveLeft&amp;&amp;!canMoveRight&amp;&amp;!done){
    change = true;
    if(instance_number(obj_mazeBlock)&lt;80) room_restart();
    while(Y&lt;480){
        if(X==640){
            Y+=32; 
            X=0;
        }
        else X+=32;
        if(place_meeting(X,Y,obj_mazeBlock)){
            if(place_free(X-32,Y)) instance_create(X-32,Y,obj_mazeBlock2);
            if(place_free(X+32,Y)) instance_create(X+32,Y,obj_mazeBlock2);
            if(place_free(X,Y-32)) instance_create(X,Y-32,obj_mazeBlock2);
            if(place_free(X,Y+32)) instance_create(X,Y+32,obj_mazeBlock2);
        }
    }
    bl = instance_nearest(random(room_width-100)+100,random(room_height-100)+100,obj_mazeBlock)
    xKey = bl.x;
    yKey = bl.y;
    with(obj_mazeBlock) instance_destroy();
    with(instance_nearest(32,32,obj_mazeBlock2)) instance_destroy();
    instance_create(64,0,obj_mazeBlock2);
    instance_create(64,32,obj_mazeBlock2);
    instance_create(0,0,obj_player);
    obj_player.image_xscale = obj_player.image_xscale*.8;
    obj_player.image_yscale = obj_player.image_yscale*.8;
    furthestBlock = instance_furthest(xKey,yKey,obj_mazeBlock2);
    maxDistance = sqrt(sqr(xKey - furthestBlock.x) + sqr(yKey - furthestBlock.y))
    with(obj_loadingText) instance_destroy();
    done=true;
}
if(done){
    a = xKey - obj_player.x;
    b = yKey - obj_player.y;
    a = a*a;
    b = b*b;
    c = sqrt(a+b);
    brightness = c/maxDistance;
    val = 255 - (255 * brightness);
    with(obj_mazeBlock2) image_blend = make_color_rgb(obj_mazeControler.val, obj_mazeControler.val,obj_mazeControler.val);
    if(c&lt;=48&amp;&amp;!instance_exists(obj_myKey)) instance_create(xKey+16,yKey+16,obj_myKey);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
