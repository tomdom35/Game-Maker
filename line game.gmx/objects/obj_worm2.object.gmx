<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stillWormRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facingRight = true;
facingLeft = false;
strength = 0;
jumping = false;
sp=0;
tempY=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_direct(vk_shift)){
    if(image_index%2!=0) image_index++;
    if(image_index&gt;47) image_index = 0;
}

if(keyboard_check_direct(vk_right)&amp;&amp;sprite_index != spr_wormLeft&amp;&amp;!jumping){
    if(sprite_index == spr_stillWormRight||sprite_index == spr_stillWormLeft || sprite_index == spr_wormLeft){
        if(sprite_index == spr_wormLeft || sprite_index == spr_stillWormLeft) x+=128;
        sprite_index = spr_wormRight;
        facingRight = true;
        facingLeft = false;
        image_index = 1;
    }
    if(image_index == 0)
        x+=88;
}

else if(keyboard_check_direct(vk_left)&amp;&amp;sprite_index != spr_wormRight&amp;&amp;!jumping){
    if(sprite_index == spr_stillWormRight||sprite_index == spr_stillWormLeft||sprite_index == spr_wormRight){
        if(sprite_index == spr_stillWormRight||sprite_index == spr_wormRight) x-=128;
        sprite_index = spr_wormLeft;
        facingLeft = true;
        facingRight = false;
        image_index = 1;
    }
    if(image_index == 0)
        x-=88;
}
else{
    if(image_index==46){
        if(facingRight &amp;&amp; sprite_index==spr_wormRight){
            x+=88;
            sprite_index = spr_stillWormRight;
        }
        else if(facingLeft &amp;&amp; sprite_index==spr_wormLeft){
            x-=88;
            sprite_index = spr_stillWormLeft;
        }
    }
    if(image_index&lt;24&amp;&amp;image_index!=0){
        if(facingRight&amp;&amp;sprite_index==spr_wormRight){
            index = 24 - image_index;
            sprite_index = spr_wormLeft;
            x-=40;
            image_index = index+24;
        }
        else if(facingLeft&amp;&amp;sprite_index==spr_wormLeft){
            index = 24 - image_index;
            sprite_index = spr_wormRight;
            x+=40;
            image_index = index+24;
        }
    }
    if(image_index == 0){
        if(facingRight){
            if(sprite_index==spr_wormLeft) x+=40;
            sprite_index = spr_stillWormRight; 
        }
        else{
            if(sprite_index==spr_wormRight) x-=40;
            sprite_index = spr_stillWormLeft;
        }
    }       
}

if(keyboard_check_pressed(vk_space)){
    spring = abs(24 - image_index)
    strength = 7 - ((spring/24)*7)
    sp=strength*2;
    if(strength&gt;0){
        jumping = true;
        y+=20;
    }
    if(facingRight){
        if(image_index&gt;30) x+=88;
        if(strength&gt;5) sp+=2;
    }
    else if(facingLeft){
        if(image_index&gt;30) x-=88;
        if(jumping){
            x+=88;
            if(strength&gt;5) y-=80;//60
        }
    }
}

if(jumping){
    sprite_index = spr_jumpingWorm;
    if(facingRight) x+=strength;
    else if(facingLeft) x-=strength;
    ang = sp/(strength*2);
    ang = ang*45
    if(strength&gt;5){
        if(facingRight)image_angle = ang;
        else if(facingLeft) image_angle = -ang;
    }
    y-=sp;
    sp-=.5;
}

if(place_meeting(x,y+1,obj_ground)&amp;&amp;jumping){
    image_angle = 0; 
    ground = instance_nearest(x,y,obj_ground);
    jumping = false;
    y=ground.y-64;
    if(facingRight) sprite_index = spr_stillWormRight;
    else if(facingLeft){
        sprite_index = spr_stillWormLeft;
        x-=128;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
