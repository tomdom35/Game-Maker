<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pacManRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveUp=false;
moveDown=false;
moveRight=false;
moveLeft=false;
canMoveLeft = true;
canMoveRight=true;
canMoveUp=true;
canMoveDown=true;
dead=false;
playing=false;
noMovement = true;
sp=4;
mostRecent = 3;
intersection=false;
audio_play_sound(snd_intro,0,false);
alarm[1] = 150;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_siren,1,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = keyboard_check_pressed(vk_up);
down = keyboard_check_pressed(vk_down);
left = keyboard_check_pressed(vk_left);
right = keyboard_check_pressed(vk_right);

if(audio_is_playing(snd_intro))
    sprite_index = spr_getReady;    
else if(noMovement&amp;&amp;instance_exists(obj_smallOrb))
{
    moveRight=true
    noMovement=false;
}

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(up&amp;&amp;!noMovement)
{
    moveUp=true;
    moveDown=false;
    mostRecent = 1;
}
if(down&amp;&amp;!noMovement)
{
    moveUp=false;
    moveDown=true;
    mostRecent = 2;
}
if(right&amp;&amp;!noMovement)
{
    moveLeft=false;
    moveRight=true;
    mostRecent = 3;
}
if(left&amp;&amp;!noMovement)
{
    moveLeft=true;
    moveRight=false;
    mostRecent = 4;
}


if(moveUp&amp;&amp;canMoveUp&amp;&amp;!dead) 
{
    if(canMoveLeft)
    {
        if(mostRecent==1)
        {
            y-=sp;
            sprite_index = spr_pacManUp;
        }
    }
    else if(canMoveRight)
    {
        if(mostRecent==1||mostRecent==4)
        {
            y-=sp;
            sprite_index = spr_pacManUp;
        }
    }
    else
    {
        y-=sp;
        sprite_index = spr_pacManUp;   
    }
}

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveDown&amp;&amp;canMoveDown&amp;&amp;!dead) 
{
    if(canMoveLeft)
    {
        if(mostRecent==2)
        {
            y+=sp;
            sprite_index = spr_pacManDown;
        }
    }
    else if(canMoveRight)
    {
        if(mostRecent==2||mostRecent==4)
        {
            y+=sp;
            sprite_index = spr_pacManDown;
        }
    }
    else
    {
        y+=sp;
        sprite_index = spr_pacManDown;
    }
}

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveLeft&amp;&amp;canMoveLeft&amp;&amp;!dead) 
{
    if(canMoveUp)
    {
        if(mostRecent==4)
        {
            x-=sp;
            sprite_index = spr_pacManLeft;       
        }
    }
    else if(canMoveDown)
    {
        if(mostRecent==4||mostRecent==1)
        {
            x-=sp;
            sprite_index = spr_pacManLeft;       
        }
    }
    else
    {
        x-=sp;
        sprite_index = spr_pacManLeft;  
    }
}

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveRight&amp;&amp;canMoveRight&amp;&amp;!dead) 
{
    if(canMoveUp)
    {
        if(mostRecent==3)
        {
            x+=sp;
            sprite_index = spr_pacManRight; 
        }
    }
    else if(canMoveDown)
    {
        if(mostRecent==3||mostRecent==1)
        {
            x+=sp;
            sprite_index = spr_pacManRight; 
        }
    }
    else
    {
        x+=sp;
        sprite_index = spr_pacManRight;
    }
}

if(dead&amp;&amp;!playing)
{
    audio_play_sound(snd_dead,0,false);
    playing = true;
}

if(x&lt;0)
    x=room_width-32;
if(x&gt;room_width)
    x=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parentGhost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ghost = instance_nearest(x,y,obj_parentGhost);

if(ghost.vulnerable)
{
    audio_play_sound(snd_eatGhost,0,false);
    with(ghost) instance_destroy();
    obj_controler.points+=200;
}
else
{
    sprite_index = spr_death;
    dead=true;
    if(image_index==16)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
