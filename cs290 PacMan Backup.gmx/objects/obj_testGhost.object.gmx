<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_redGhost</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parentGhost</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMoveUp=false;
canMoveDown=false;
canMoveLeft=false;
canMoveRight=false;
sp=2;
vulnerable = false;
moveUp=false;
moveDown=false;
moveLeft=false;
moveRight=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_redGhost;
vulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(obj_pacMan))
    instance_destroy();

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(instance_exists(obj_pacMan)&amp;&amp;(canMoveUp&amp;&amp;canMoveLeft)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveUp)
        { 
            moveUp = true;
            moveDown = false;
            moveLeft = false;
            moveRight = false;
        }
        else 
        {
            moveLeft = true;
            moveRight = false;
            moveUp = false;
            moveDown = false;
        }
    }
}

else if(instance_exists(obj_pacMan)&amp;&amp;(canMoveUp&amp;&amp;canMoveRight)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveUp)
        { 
            moveUp = true;
            moveDown = false;
            moveLeft = false;
            moveRight = false;
        }
        else 
        {
            moveLeft = false;
            moveRight = true;
            moveUp = false;
            moveDown = false;
        }
    }
}

else if(instance_exists(obj_pacMan)&amp;&amp;(canMoveDown&amp;&amp;canMoveLeft)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveLeft)
        { 
            moveUp = false;
            moveDown = false;
            moveLeft = true;
            moveRight = false;
        }
        else 
        {
            moveLeft = true;
            moveRight = false;
            moveUp = false;
            moveDown = false;
        }
    }
}

else if(instance_exists(obj_pacMan)&amp;&amp;(canMoveDown&amp;&amp;canMoveRight)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveDown)
        { 
            moveUp = false;
            moveDown = true;
            moveLeft = false;
            moveRight = false;
        }
        else 
        {
            moveLeft = false;
            moveRight = true;
            moveUp = false;
            moveDown = false;
        }
    }
}

else if(instance_exists(obj_pacMan)&amp;&amp;(canMoveUp||canMoveDown)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveUp)
        { 
            moveUp = true;
            moveDown = false;
            moveLeft = false;
            moveRight = false;
        }
        else if(canMoveDown)
        {
            moveLeft = false;
            moveRight = false;
            moveUp = false;
            moveDown = true;
        }
    }
}

else if(instance_exists(obj_pacMan)&amp;&amp;(canMoveLeft||canMoveRight)&amp;&amp;sprite_index==spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(canMoveLeft)
        { 
            moveUp = false;
            moveDown = false;
            moveLeft = true;
            moveRight = false;
        }
        else if(canMoveRight)
        {
            moveLeft = false;
            moveRight = true;
            moveUp = false;
            moveDown = false;
        }
    }
}



if(moveUp) y-=sp;

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveDown) y+=sp;

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveLeft) x-=sp;

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(moveRight)x+=sp;

/*Ghost running away
if(instance_exists(obj_pacMan)&amp;&amp;(canMoveUp||canMoveDown)&amp;&amp;sprite_index!=spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(obj_pacMan.y&gt;=y&amp;&amp;canMoveUp) y-=sp;
        else if(canMoveDown) y+=sp;
    }
}

if(place_meeting(x,y-sp,obj_parentBorder)) canMoveUp=false;
else canMoveUp=true;
if(place_meeting(x,y+sp,obj_parentBorder)) canMoveDown=false;
else canMoveDown=true;
if(place_meeting(x-sp,y,obj_parentBorder)) canMoveLeft=false;
else canMoveLeft=true;
if(place_meeting(x+sp,y,obj_parentBorder)) canMoveRight=false;
else canMoveRight=true;

if(instance_exists(obj_pacMan)&amp;&amp;(canMoveLeft||canMoveRight)&amp;&amp;sprite_index!=spr_redGhost)
{
    if(!obj_pacMan.noMovement)
    {
        if(obj_pacMan.x&gt;=x&amp;&amp;canMoveLeft) x-=sp;
        else if(canMoveRight) x+=sp;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
